name: Release APK for Obtainium

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build and Release APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install Android Build Tools
        run: |
          # Install build-tools that include zipalign and aapt
          sdkmanager "build-tools;34.0.0"
          
          # Verify zipalign exists
          ls -la $ANDROID_HOME/build-tools/34.0.0/zipalign || echo "zipalign not found!"
          
          # Add build-tools to PATH
          echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
          
      - name: Debug - Environment Info
        run: |
          echo "=== Environment Information ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "Java Version:"
          java -version
          echo "Gradle Version:"
          ./gradlew --version || echo "Gradle not yet available"
          echo "Android SDK Path: $ANDROID_HOME"
          echo "PATH: $PATH"
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # Simpler cache key to avoid 400 errors
          key: gradle-${{ runner.os }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: |
            gradle-${{ runner.os }}-
        # Continue on cache errors since they're just warnings
        continue-on-error: true
        
      - name: Debug - Cache status
        run: |
          echo "=== Cache Status ==="
          echo "Cache hit: ${{ steps.gradle-cache.outputs.cache-hit }}"
          echo "Gradle home:"
          ls -la ~/.gradle/ || echo "Gradle home not found"
            
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          
      - name: Update version in gradle
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          # Extract version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          # Calculate version code as MAJOR*10000 + MINOR*100 + PATCH
          VERSION_CODE=$((MAJOR * 10000 + MINOR * 100 + PATCH))
          
          # Update build.gradle.kts
          sed -i "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/" app/build.gradle.kts
          sed -i "s/versionName = \"[^\"]*\"/versionName = \"$VERSION\"/" app/build.gradle.kts
          
          echo "Updated version to $VERSION (code: $VERSION_CODE)"
          
      - name: Debug - Pre-build checks
        run: |
          echo "=== Pre-build Checks ==="
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Gradle wrapper permissions:"
          ls -la gradlew
          echo "Build.gradle.kts content (first 20 lines):"
          head -20 app/build.gradle.kts
          
      - name: Build release APK
        run: |
          echo "=== Starting Release Build ==="
          ./gradlew assembleRelease --info --stacktrace
          echo "=== Build Complete ==="
          echo "Checking output directory:"
          ls -la app/build/outputs/apk/release/ || echo "Release directory not found!"
        
      - name: Debug - Pre-signing checks
        run: |
          echo "=== Pre-signing Checks ==="
          echo "Release directory contents:"
          ls -la app/build/outputs/apk/release/
          echo "APK file details:"
          find app/build/outputs/apk/release/ -name "*.apk" -exec file {} \; -exec ls -la {} \;
          echo "Build tools check:"
          ls -la $ANDROID_HOME/build-tools/34.0.0/ | grep -E "(zipalign|apksigner)" || echo "Build tools not found!"
          
      - name: Sign APK
        id: sign_apk
        uses: kevin-david/zipalign-sign-android-release@v2
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          zipAlign: true
        env:
          BUILD_TOOLS_VERSION: "34.0.0"
          
      - name: Rename APK
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          SIGNED_APK="${{ steps.sign_apk.outputs.signedReleaseFile }}"
          
          # Debug: List files in the release directory
          echo "Files in release directory:"
          ls -la app/build/outputs/apk/release/
          
          # Check if the signed file exists
          if [ -f "$SIGNED_APK" ]; then
            echo "Found signed APK: $SIGNED_APK"
            mv "$SIGNED_APK" "SubControl-v$VERSION.apk"
          else
            # Fallback: look for any signed APK file
            echo "Looking for signed APK files..."
            SIGNED_FILE=$(find app/build/outputs/apk/release/ -name "*signed*.apk" -o -name "*release*.apk" | head -1)
            if [ -f "$SIGNED_FILE" ]; then
              echo "Found APK: $SIGNED_FILE"
              mv "$SIGNED_FILE" "SubControl-v$VERSION.apk"
            else
              echo "Error: No signed APK found!"
              exit 1
            fi
          fi
          
      - name: Verify APK signature
        run: |
          APK_PATH="SubControl-v${{ steps.version.outputs.VERSION }}.apk"
          echo "=== APK Verification ==="
          echo "Verifying APK: $APK_PATH"
          
          # Run aapt but continue on warnings about missing resources
          echo "Running aapt dump badging..."
          $ANDROID_HOME/build-tools/34.0.0/aapt dump badging "$APK_PATH" 2>&1 | grep -E "(package:|sdkVersion:|targetSdkVersion:|application-label:|launchable-activity:)" || true
          
          # The important verification is jarsigner
          echo "Running jarsigner verification..."
          jarsigner -verify -verbose -certs "$APK_PATH"
          
          if [ $? -eq 0 ]; then
            echo "✅ APK signature verification successful!"
          else
            echo "❌ APK signature verification failed!"
            exit 1
          fi
          
      - name: Generate changelog and release notes
        id: release_notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Make changelog script executable
          chmod +x scripts/generate-changelog.sh
          
          # Generate changelog for this version
          echo "Generating changelog for version $VERSION..."
          NO_COLOR=1 ./scripts/generate-changelog.sh --incremental "$VERSION" > changelog_entry.txt
          
          # Try to extract release notes from RELEASE_NOTES.md first
          RELEASE_NOTES=""
          if [ -f "RELEASE_NOTES.md" ]; then
            # Find the section for this version
            RELEASE_NOTES=$(awk "/^## \[?v?$VERSION\]?/,/^## \[?v?[0-9]/" RELEASE_NOTES.md | head -n -1 | tail -n +2)
            
            # If no specific version found, use the first section
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES=$(awk '/^## /,/^## /' RELEASE_NOTES.md | head -n -1 | tail -n +2)
            fi
          fi
          
          # If no release notes found, use generated changelog
          if [ -z "$RELEASE_NOTES" ]; then
            if [ -s changelog_entry.txt ]; then
              RELEASE_NOTES=$(cat changelog_entry.txt)
            else
              RELEASE_NOTES="Release version $VERSION of SubControl - Privacy-focused Android Subscription Manager"
            fi
          fi
          
          # Save to file to handle multiline content
          echo "$RELEASE_NOTES" > release_notes.txt
          
          # Update CHANGELOG.md if it exists, or create it
          if [ -f "CHANGELOG.md" ]; then
            echo "Updating CHANGELOG.md..."
            NO_COLOR=1 ./scripts/generate-changelog.sh --update CHANGELOG.md "$VERSION"
          else
            echo "Creating CHANGELOG.md..."
            NO_COLOR=1 ./scripts/generate-changelog.sh --full CHANGELOG.md
          fi
          
      - name: Commit updated changelog
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # We only want to commit the CHANGELOG.md, not the version changes in build.gradle.kts
          # Reset any changes to build.gradle.kts first
          git checkout -- app/build.gradle.kts || true
          
          # Check if we're in detached HEAD state (typical for tag checkouts)
          if [ -z "$(git branch --show-current)" ]; then
            echo "In detached HEAD state - checking out main branch"
            
            # Handle any untracked files that might block checkout
            if [ -f "CHANGELOG.md" ] && ! git ls-files --error-unmatch CHANGELOG.md >/dev/null 2>&1; then
              echo "CHANGELOG.md is untracked, stashing it temporarily"
              mkdir -p /tmp/workflow-stash
              cp CHANGELOG.md /tmp/workflow-stash/CHANGELOG.md
            fi
            
            git fetch origin main
            git checkout main
            git pull origin main
            
            # Restore the CHANGELOG.md if we stashed it
            if [ -f "/tmp/workflow-stash/CHANGELOG.md" ]; then
              echo "Restoring CHANGELOG.md"
              cp /tmp/workflow-stash/CHANGELOG.md CHANGELOG.md
              rm -rf /tmp/workflow-stash
            fi
          fi
          
          # Add and commit changelog if it was modified
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
            if ! git diff --cached --quiet; then
              git commit -m "Update CHANGELOG.md for version $VERSION"
              git push origin main
            else
              echo "No changes to CHANGELOG.md"
            fi
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: SubControl ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.txt
          files: |
            SubControl-v${{ steps.version.outputs.VERSION }}.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: SubControl-v${{ steps.version.outputs.VERSION }}-signed
          path: SubControl-v${{ steps.version.outputs.VERSION }}.apk